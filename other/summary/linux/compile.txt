
定义三个变量target,source,command，分别代表编译目标、信赖文件和编译命令，就成了这样：
$(target):$(source)
$(command)

-----------------------------------------------------------------------------

= 是最基本的赋值
:= 是覆盖之前的值
?= 是如果没有被赋值过就赋予等号后面的值
+= 是添加等号后面的值

而 = 与 := 的区别在于，= 会在makefile 展开后再决定变量的值，即最后被指定的值
eg：
            x = foo
            y = $(x) bar
            x = xyz
      在上例中，y的值将会是 xyz bar ，而不是 foo bar 。
而:= 表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。
在上例中，y的值将会是 foo bar ，而不是 xyz bar 了。

-----------------------------------------------------------------------------

Android.mk其实是把真正的Makefile包装起来，做成了一个对使用者来说很简单的东西。使用它来编译程序时，不管是动态库、可执行的二进制文件，还是Jar库、APK包，只要沿着一个简单的思路来做三大步就可以了：清除旧变量，设置新变量，调用编译函数。

1、清除旧变量，是因为Android.mk中所有的变量都是全局的，编译函数在编译时会调用这些变量。为了防止编译函数使用了编译其它模块时设置的变量，每次开始编译一个新的模块时清除所有的变量是个好习惯。

2、设置新变量就是把本次编译时用到的源码地址，包名等设置好。

3、调用编译函数其实就是include一个固定的mk文件，这个mk文件会根据设置的变量提取出编译模块需要的target，Command等信息并执行固定的编译命令。

-----------------------------------------------------------------------------

定义一个专门用来清除变量的clear_vars.mk里面的内容如下：

name :=
target :=
source :=
command :=

再定义一个变量CLEAR_VARS := clear_vars.mk。上面的编译脚本就变成了这样：

include $(CLEAR_VARS)
name := Contacts
include $(BUILD_PACKAGES)

