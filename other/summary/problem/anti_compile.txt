生成签名文件：
1.build -> Generate Signed APK...

2.Create new...
设置Key store path，即路径和名称，如：d:\work\MySignFile.jks
设置密码：android
设置别名：key
...
之后点击OK。

填写密码后，确认密码 -> Next。即可生成签名文件d:\work\MySignFile.jks

---------------------------------------------------------------------------------------

反编译：
源apk文件：app-debug.apk。
所用工具:
dex2jar,jd-gui(反编译代码)
apktool(反编译资源)

一、反编译代码：
1.复制并重名app-debug.zip，解压该文件，其中classes.dex是需要反编译的文件，它存放了所有的java代码。
2.将该文件复制到dex2jar解压的目录下，命令行执行：
d2j-dex2jar classes.dex
执行结果：
dex2jar classes.dex -> .\classes-dex2jar.jar
得到classes-dex2jar.jar，该文件用jd-gui工具打开，即可查看反编译出的源码。

二、反编译资源：
1.将app-debug.apk复制到apktool工具目录下，命令行执行：
apktool d app-debug.apk
执行结果：
I:Using Apktool 2.3.1 on app-debug.apk
I:Loading resource table...
...
I:Copying orignal files...
得到app-debug文件夹，该文件夹下，res是资源文件，smali是代码文件，AndroidManifest.xml是清单文件，可进行修改。
出现错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\Users\Administrator\apktool\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。

三、重新打包：
将app-debug文件夹下的内容修改后，可重新进行打包并生成可执行apk文件。
1.重新生成apk文件，命令行执行：
apktool b app-debug -o New_app.apk
执行结果：
I:Using Apktool 2.3.1
...
I:Copying unknown files/dir...
得到新文件New_app.apk,文件。

2.AndroidStudio中File -> Other Settings -> default project structure...可查看SDK和jdk路径。

3.文件对齐：
<Android SDK>/build-tools/<version>目录下，命令行执行：
zipalign 4 New_app.apk New_app_aligned.apk
得到新文件New_app_aligned.apk。

4.文件签名：
<JDK>/bin目录下，命令行执行：
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore MySignFile.jks -storepass android New_app_aligned.apk key
执行结果：
正在签名:...
...
已签名。
此时New_app_aligned.apk将会被签名更新。
得到的New_app_aligned.apk文件即为最终修改后的可执行apk文件。
